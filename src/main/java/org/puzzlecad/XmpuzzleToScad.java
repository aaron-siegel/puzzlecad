package org.puzzlecad;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.GZIPInputStream;

public class XmpuzzleToScad {

    File file;

    public XmpuzzleToScad(String filename) {

        this.file = new File(filename);

    }

    public void convert() throws Exception {

        GZIPInputStream inputStream = new GZIPInputStream(new FileInputStream(file));
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        Document document = db.parse(inputStream);

        int gridType = Integer.parseInt(document.getElementsByTagName("gridType").item(0).getAttributes().getNamedItem("type").getTextContent());

        if (gridType != 0) {
            throw new UnsupportedOperationException("Unsupported BurrTools grid type (currently only Rectilinear is supported)");
        }

        Node shapes = document.getElementsByTagName("shapes").item(0);
        List<int[][][]> pieces = new ArrayList<int[][][]>();

        for (int i = 0; i < shapes.getChildNodes().getLength(); i++) {
            Node piece = shapes.getChildNodes().item(i);
            if (piece.getNodeName().equals("voxel")) {
                int x = Integer.parseInt(piece.getAttributes().getNamedItem("x").getNodeValue());
                int y = Integer.parseInt(piece.getAttributes().getNamedItem("y").getNodeValue());
                int z = Integer.parseInt(piece.getAttributes().getNamedItem("z").getNodeValue());
                int[][][] array = xmpuzzleToArray(x, y, z, piece.getTextContent());
                if (array.length > 0)
                    pieces.add(array);
            }
        }
        inputStream.close();

        String filename = file.getName();
        if (filename.endsWith(".xmpuzzle")) {
            filename = filename.substring(0, filename.lastIndexOf("."));
        }
        String outputFilename = filename + ".scad";
        write(new File(outputFilename), pieces);

    }

    public int[][][] xmpuzzleToArray(int x, int y, int z, String xmpuzzlePiece) {

        int[][][] array = new int[z][y][x];

        for (int k = 0; k < z; k++) {
            for (int j = 0; j < y; j++) {
                for (int i = 0; i < x; i++) {

                    array[k][j][i] = xmpuzzlePiece.charAt(k * x * y + j * x + i) == '#' ? 1 : 0;

                }
            }
        }

        return stripArray(array);

    }

    public int[][][] stripArray(int[][][] array) {

        int xmin = Integer.MAX_VALUE;
        int xmax = Integer.MIN_VALUE;
        int ymin = Integer.MAX_VALUE;
        int ymax = Integer.MIN_VALUE;
        int zmin = Integer.MAX_VALUE;
        int zmax = Integer.MIN_VALUE;

        for (int k = 0; k < array.length; k++) {
            for (int j = 0; j < array[k].length; j++) {
                for (int i = 0; i < array[k][j].length; i++) {

                    if (array[k][j][i] != 0) {
                        xmin = Math.min(xmin, i);
                        xmax = Math.max(xmax, i);
                        ymin = Math.min(ymin, j);
                        ymax = Math.max(ymax, j);
                        zmin = Math.min(zmin, k);
                        zmax = Math.max(zmax, k);
                    }

                }
            }
        }

        if (xmin == Integer.MAX_VALUE)
            return new int[0][0][0];

        int[][][] newArray = new int[zmax - zmin + 1][ymax - ymin + 1][xmax - xmin + 1];

        for (int k = zmin; k <= zmax; k++) {
            for (int j = ymin; j <= ymax; j++) {
                for (int i = xmin; i <= xmax; i++) {

                    newArray[k - zmin][j - ymin][i - xmin] = array[k][j][i];

                }
            }
        }

        return newArray;

    }

    public void write(File outputFile, List<int[][][]> pieces) throws Exception {

        PrintWriter out = new PrintWriter(outputFile);

        out.println("include <puzzlecad.scad>");
        out.println();

        out.println("// This model was generated by puzzlecad's bt2scad tool from the BurrTools file:");
        out.println("// " + file.getName());
        out.println();
        out.println("// You can freely edit this file to make changes to the model structure or parameters.");
        out.println();

        out.println("require_puzzlecad_version(\"2.0\");");
        out.println();
        out.println("$burr_scale = " + defaultScale(pieces) + ";");
        out.println("$auto_layout = true;");
        out.println();


        out.println("burr_plate([");
        for (int i = 0; i < pieces.size(); i++) {
            out.print(pieceToString(pieces.get(i)));
            if (i < pieces.size() - 1) {
                out.print(",");
            }
            out.println();
        }
        out.println("]);");
        out.close();

    }

    public String defaultScale(List<int[][][]> pieces) {

        int maxdim = 0;
        for (int[][][] piece : pieces) {
            maxdim = Math.max(maxdim, piece.length);
            maxdim = Math.max(maxdim, piece[0].length);
            maxdim = Math.max(maxdim, piece[0][0].length);
        }

        if (maxdim <= 3)
            return "17";
        else if (maxdim == 4)
            return "16";
        else if (maxdim == 5)
            return "14";
        else
            return "11";

    }

    public String pieceToString(int[][][] array) {

        StringBuilder result = new StringBuilder("    [ ");
        for (int k = 0; k < array.length; k++) {
            result.append("\"");
            for (int j = 0; j < array[k].length; j++) {
                for (int i = 0; i < array[k][j].length; i++) {
                    result.append(array[k][j][i] == 1 ? 'x' : '.');
                }
                if (j < array[k].length - 1) {
                    result.append("|");
                }
            }
            result.append("\"");
            if (k < array.length - 1) {
                result.append(",\n      ");
            }
        }
        result.append(" ]");
        return result.toString();

    }

    public static void main(String[] args) {

        try {
        	if (args.length < 1) {
        		System.out.println("Usage: java -jar bt-to-scad.jar [btfile]");
        		System.out.println("  where [btfile] is an .xmpuzzle file");
        	} else {
	            new XmpuzzleToScad(args[0]).convert();
	        }
        } catch (Exception exc) {
            System.err.println("BurrTools conversion failed with the following error message:");
            System.err.println(exc.getMessage());
            System.exit(-1);
        }

    }

}
